steps:
- task: yavt@1 
  inputs:
    mode: 'Multi'
    updateNuspecFiles: true
    updateBuildNumber: false
    semverVersion: 'v1'

- powershell: |   
    $nugetFeed = if ($Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/release/") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/main") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/tags")) { "release" } else { "dev" }
    Write-Host "##vso[task.setvariable variable=NuGetFeed;]$nugetFeed"
  displayName: Set NuGet feed

- task: Cache@2
  inputs:
    key: 'nuget | "$(Agent.OS)" | queue/**/*.csproj'
    restoreKeys: |
      nuget | "$(Agent.OS)"
      nuget
    path: $(UserProfile)/.nuget/packages
  displayName: Cache NuGet packages

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(WorkingDirectory)/$(Solution)'
    feedsToUse: 'select'
    vstsFeed: '$(NuGetFeed)'
  displayName: 'Restore'
  
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(WorkingDirectory)/$(Solution)'
    arguments: '--configuration $(BuildConfiguration) --no-restore'

- task: codesigning@2
  displayName: 'Code Signing'
  inputs:
    secureFileId: 'codesigning.pfx'
    signCertPassword: '$(Code_Signing_Password)'
    filePaths: |
      $(WorkingDirectory)/src/**/*fiskaltrust*.dll
      $(WorkingDirectory)/src/**/*fiskaltrust*.exe

- powershell: |
    mkdir $(Build.ArtifactStagingDirectory)/packages/
  displayName: Create target directory

- powershell: |
    $packageName = "fiskaltrust.Middleware.Queue.InMemory"
    $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText
    dotnet publish --configuration $(buildConfiguration) -f net6 --output $(Build.ArtifactStagingDirectory)/raw/$packageName --no-build /p:DebugType=None /p:DebugSymbols=false
    Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw/$packageName/* -DestinationPath $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip

    $hash = Get-FileHash $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip -Algorithm SHA256
    $hashbytes = $hash.Hash -split '([A-F0-9]{2})' | foreach-object { if ($_) {[System.Convert]::ToByte($_,16)}}
    $hashstring = [System.Convert]::ToBase64String($hashbytes)
    $hashstring | Set-Content $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip.hash
  displayName: 'Publish fiskaltrust.Middleware.Queue.InMemory'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.InMemory'

- powershell: |
    $packageName = "fiskaltrust.Middleware.Queue.SQLite"
    $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText
    dotnet publish --configuration $(buildConfiguration) -f net6 --output $(Build.ArtifactStagingDirectory)/raw/$packageName --no-build /p:DebugType=None /p:DebugSymbols=false
    Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw/$packageName/* -DestinationPath $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip

    $hash = Get-FileHash $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip -Algorithm SHA256
    $hashbytes = $hash.Hash -split '([A-F0-9]{2})' | foreach-object { if ($_) {[System.Convert]::ToByte($_,16)}}
    $hashstring = [System.Convert]::ToBase64String($hashbytes)
    $hashstring | Set-Content $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip.hash
  displayName: 'Publish fiskaltrust.Middleware.Queue.SQLite'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.SQLite'

- powershell: |
    $packageName = "fiskaltrust.Middleware.Queue.PostgreSQL"
    $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText
    dotnet publish --configuration $(buildConfiguration) -f net6 --output $(Build.ArtifactStagingDirectory)/raw/$packageName --no-build /p:DebugType=None /p:DebugSymbols=false
    Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw/$packageName/* -DestinationPath $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip

    $hash = Get-FileHash $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip -Algorithm SHA256
    $hashbytes = $hash.Hash -split '([A-F0-9]{2})' | foreach-object { if ($_) {[System.Convert]::ToByte($_,16)}}
    $hashstring = [System.Convert]::ToBase64String($hashbytes)
    $hashstring | Set-Content $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip.hash
  displayName: 'Publish fiskaltrust.Middleware.Queue.PostgreSQL'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.PostgreSQL'

- powershell: |
    $packageName = "fiskaltrust.Middleware.Queue.MySQL"
    $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText
    dotnet publish --configuration $(buildConfiguration) -f net6 --output $(Build.ArtifactStagingDirectory)/raw/$packageName --no-build /p:DebugType=None /p:DebugSymbols=false
    Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw/$packageName/* -DestinationPath $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip

    $hash = Get-FileHash $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip -Algorithm SHA256
    $hashbytes = $hash.Hash -split '([A-F0-9]{2})' | foreach-object { if ($_) {[System.Convert]::ToByte($_,16)}}
    $hashstring = [System.Convert]::ToBase64String($hashbytes)
    $hashstring | Set-Content $(Build.ArtifactStagingDirectory)/packages/$packageName-$version.zip.hash
  displayName: 'Publish fiskaltrust.Middleware.Queue.MySQL'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.MySQL'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: packages'
  inputs:
    pathToPublish: '$(build.artifactstagingdirectory)/packages'
    artifactName: packages-v2
