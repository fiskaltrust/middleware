steps:
- task: yavt@1 
  inputs:
    mode: 'Multi'
    updateNuspecFiles: true
    updateBuildNumber: false
    semverVersion: 'v1'
    failOnTagVersionMismatch: true

- powershell: |
    $nugetFeed = if ($Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/release/") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/main") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/tags")) { "release" } else { "dev" }
    Write-Host "##vso[task.setvariable variable=NuGetFeed;]$nugetFeed"
  displayName: Set NuGet feed
  
- task: Cache@2
  inputs:
    key: 'nuget | "$(Agent.OS)" | queue/**/*.csproj'
    restoreKeys: |
      nuget | "$(Agent.OS)"
      nuget
    path: $(UserProfile)/.nuget/packages
  displayName: Cache NuGet packages

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(WorkingDirectory)/$(Solution)'
    feedsToUse: 'select'
    vstsFeed: '$(NuGetFeed)'
  displayName: 'Restore'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: |
     $(WorkingDirectory)/**/*.csproj
     !$(WorkingDirectory)/**/fiskaltrust.Middleware.Queue.Sqlite.AndriodLauncherTest.csproj
    arguments: '--configuration $(BuildConfiguration) --no-restore'

- script: |
    dotnet publish --configuration $(buildConfiguration) --no-restore -f net461
    dotnet publish --configuration $(buildConfiguration) --no-restore -f netstandard2.0
    dotnet publish --configuration $(buildConfiguration) --no-restore -f netstandard2.1
  displayName: 'dotnet publish fiskaltrust.Middleware.Queue.SQLite'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.SQLite'

- script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration)
  displayName: 'dotnet pack fiskaltrust.Middleware.Queue.InMemory'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.InMemory'

- script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration) /p:NuspecFile=.nuspec
  displayName: 'dotnet pack fiskaltrust.Middleware.Queue.SQLite'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.SQLite'

- script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration)
  displayName: 'dotnet pack fiskaltrust.Middleware.Queue.EF'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.EF'
  
- script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration)
  displayName: 'dotnet pack fiskaltrust.Middleware.Queue.PostgreSQL'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.PostgreSQL'

- script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration)
  displayName: 'dotnet pack fiskaltrust.Middleware.Abstractions'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Abstractions'
  
- script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration)
  displayName: 'dotnet pack fiskaltrust.Middleware.Queue.MySQL'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.MySQL'

- script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration)
  displayName: 'dotnet pack fiskaltrust.Middleware.Queue.AzureTableStorage'
  workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.AzureTableStorage'

- pwsh: |
    $sqlitePackageName=Get-ItemPropertyValue -Path '$(Build.ArtifactStagingDirectory)\fiskaltrust.Middleware.Queue.SQLite*.nupkg' -Name Name        
    $sqlitePackageNewName="fiskaltrust.Middleware.Queue.SQLite.1.3.0-local.nupkg"
    Copy-Item $(Build.ArtifactStagingDirectory)/$sqlitePackageName -Destination "./test/$sqlitePackageNewName"   
    nuget add ./test/$sqlitePackageNewName -Source ./test/SQLite-Localfeed 
    nuget sources Add -Name SQLite-Localfeed -Source ./test/SQLite-Localfeed
    Compress-Archive -Path ./test/SQLite-Localfeed -DestinationPath $(Build.ArtifactStagingDirectory)/SQLite-Localfeed.zip
  displayName: 'create localfeed'
  continueOnError: true
  workingDirectory: '$(WorkingDirectory)'

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
     command: "restore"
     arguments: "-Verbosity detailed"
     restoreSolution: '$(WorkingDirectory)/$(Solution)'
     feedsToUse: 'select'
     vstsFeed: '$(NuGetFeed)'
  displayName: Restore NuGet packages

- task: JavaToolInstaller@0
  inputs:
    versionSpec: "11"
    jdkArchitectureOption: "x64"
    jdkSourceOption: "PreInstalled"

- task: XamarinAndroid@1
  inputs:
    projectFile: "$(WorkingDirectory)/**/fiskaltrust.Middleware.Queue.Sqlite.AndriodLauncherTest.csproj"
    outputDirectory: $(build.binariesDirectory)/$(buildConfiguration)
    configuration: "$(buildConfiguration)"
    msbuildVersionOption: "latest"
    jdkOption: "JDKVersion"
  displayName: Build AndriodTest Launcher

- pwsh: |
    dotnet add ./test/fiskaltrust.Middleware.Queue.Sqlite.AndriodLauncherTest/fiskaltrust.Middleware.Queue.Sqlite.AndriodLauncherTest.csproj package $sqlitePackageName --version $sqlitePackageVersion --source SQLite-Localfeed
    dotnet restore --source SQLite-Localfeed
    Compress-Archive -Path ./test/SQLite-Localfeed -DestinationPath $(Build.ArtifactStagingDirectory)/SQLite-Localfeed.zip
  displayName: install sqlite from localfeed'
  workingDirectory: '$(WorkingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    pathToPublish: '$(build.artifactstagingdirectory)'
    artifactName: packages-v1