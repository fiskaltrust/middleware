steps:    
- script: |
    dotnet tool install --tool-path tools dotnet-reportgenerator-globaltool
  displayName: Install report generator
  workingDirectory: '/'

- powershell: |   
    $nugetFeed = if ($Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/release/") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/main") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/tags/")) { "middleware" } else { "dev" }
    Write-Host "##vso[task.setvariable variable=NuGetFeed;]$nugetFeed"
  displayName: Set NuGet feed

- task: Cache@2
  inputs:
    key: 'nuget | "$(Agent.OS)" | scu-at/**/*.csproj'
    restoreKeys: |
      nuget | "$(Agent.OS)"
      nuget
    path: $(UserProfile)/.nuget/packages
  displayName: Cache NuGet packages

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(WorkingDirectory)/$(Solution)'
    vstsFeed: $(NuGetFeed)
    arguments: '--configuration $(BuildConfiguration)'
  displayName: 'Restore'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(WorkingDirectory)/$(Solution)'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: |
      $(WorkingDirectory)/**/*.UnitTest.csproj
    arguments: '--configuration $(BuildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Include=[fiskaltrust.*]*'
    nobuild: true
  displayName: 'Run unit tests'

- script: |
    /tools/reportgenerator -reports:$(Build.SourcesDirectory)/$(WorkingDirectory)/test/**/*.opencover.xml -targetdir:$(Build.SourcesDirectory)/$(WorkingDirectory)/CodeCoverage -reporttypes:"Cobertura;HTMLInline;HTMLChart"
  displayName: Create Code coverage report
  workingDirectory: '/'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/$(WorkingDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/$(WorkingDirectory)/CodeCoverage'
