parameters:
- name: apiuri
  default: https://swissbit-cloud-tse.com/api/management
  type: string
- name: tokenuri
  default: ../../auth/realms/sb/protocol/openid-connect/token
  type: string
- name: apiusername
  type: string
- name: apipassword
  type: string
- name: tenantid
  type: string
- name: accountid
  type: string
- name: outletid
  type: string

steps:
- pwsh: |
    $body = @{
      "grant_type" = "password";
      "username" = "${{ parameters.apiusername }}";
      "password" = $env:apipassword;
      "client_id" = "sb-api";
    }

    $response = Invoke-RestMethod -Method POST -Headers @{ "Content-type" = "application/x-www-form-urlencoded" } -Uri ${{ parameters.apiuri }}/${{ parameters.tokenuri}} -Body $body -UseBasicParsing 

    $default = @{
      "Headers" = @{
        "X-Managed-Tenant" = "${{ parameters.tenantid }}";
        "Content-Type" = "application/json"
      };
      "Authentication" = "Bearer";
      "Token" = $(ConvertTo-SecureString $response.access_token -AsPlainText);
    }

    $response = Invoke-WebRequest @default -Method GET -Uri ${{ parameters.apiuri }}/organizations?filter=${{ parameters.accountid }} -UseBasicParsing 

    if($response.StatusCode -ne 200) {
      throw "Could not get Organization"
    }

    $organization = $($response | ConvertFrom-Json).results[0]

    $response = Invoke-WebRequest @default -Method GET -Uri https://swissbit-cloud-tse.com/api/management/business-premises?filter=${{ parameters.outletid }} -UseBasicParsing 
    
    if($response.StatusCode -ne 200) {
      throw "Could not get Business Premise"
    }

    $businessPremise = $($response | ConvertFrom-Json).results[0]

    $body = @{
      "name" = [guid]::NewGuid().ToString();
      "mode" = "cloud"
    } | ConvertTo-Json

    $response = Invoke-WebRequest @default -Method POST -Uri https://swissbit-cloud-tse.com/api/management/business-premises/$($businessPremise.id)/tss -Body $body -UseBasicParsing 

    if($response.StatusCode -ne 201) {
      throw "Could not create TSS"
    }

    $tss = $response | ConvertFrom-Json
    
    Set-Content -Path "$(Build.SourcesDirectory)/logs/tss.json" -Value $response -Encoding utf8

    $response = Invoke-WebRequest @default -Method GET -Uri https://swissbit-cloud-tse.com/api/management/tss/$($tss.id)/tokens -UseBasicParsing 

    if($response.StatusCode -ne 200) {
      throw "Could not get activation tokens"
    }

    $token = $response | ConvertFrom-Json
    
    $configuration = [String]$(Get-Content $(Build.SourcesDirectory)/launcher/configuration.json -Encoding utf8) | ConvertFrom-Json

    $configuration.ftSignaturCreationDevices[0].Configuration = @{
      "FccId" = $tss.fccId;
      "FccSecret" = $tss.fccSecret;
      "FccPort" = $configuration.ftSignaturCreationDevices[0].Configuration.FccPort
      "ErsCode" = $tss.ersSecret;
      "ActivationToken" = $token.activationToken;
    }

    $configuration.ftQueues[0].Configuration.init_ftQueueDE[0].CashBoxIdentification = -join ((65..90) + (97..122) | Get-Random -Count 21 | % {[char]$_})

    ConvertTo-Json $configuration -Depth 100 | Set-Content -Path $(Build.SourcesDirectory)/launcher/configuration.json -Encoding utf8
  displayName: Create SwissbitCloud
  env:
    apipassword: ${{ parameters.apipassword }}
