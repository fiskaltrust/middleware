using System;
using fiskaltrust.ifPOS.v1;
using fiskaltrust.Middleware.Localization.QueueDE.Extensions;
using fiskaltrust.storage.V0;
using Microsoft.Extensions.DependencyInjection;

namespace fiskaltrust.Middleware.Localization.QueueDE.RequestCommands.Factories
{
    public class RequestCommandFactory : IRequestCommandFactory
    {
        private readonly IServiceProvider _serviceProvider;

        public RequestCommandFactory(IServiceProvider serviceCollection) => _serviceProvider = serviceCollection;

        public RequestCommand Create(ftQueue queue, ftQueueDE queueDE, ReceiptRequest request)
        {
            // Queue is not active, and receipt is not initial-operation
            if ((queue.IsNew() || queue.IsDeactivated()) && !request.IsInitialOperationReceipt())
            {
                return _serviceProvider.GetRequiredService<DisabledQueueReceiptCommand>();
            }
            // In the process of switching SCUs, and receipt is not finish-switch
            if (queue.IsActive() && queueDE.ftSignaturCreationUnitDEId == null && !request.IsFinishScuSwitchReceipt())
            {
                return _serviceProvider.GetRequiredService<DisabledScuReceiptCommand>();
            }

            if (request.IsUsedFailed())
            {
                // The receipt was created in a moment where the POS terminal was not able to communicate with the Middleware.
                // Therefore, a receipt was generated by the POS terminal on its own with the hint "electronic recording system failed" and a failure counter.
                // After the communication between POS terminal and the Middleware is re-established, the receipts are sent with a special ftReceiptCaseFlag to be finally included into the receipt chain.
                // In Germany, there is no requirement to send this receipts to the SCU/TSE.
                return _serviceProvider.GetRequiredService<UsedFailedReceiptCommand>();
            }

            if (request.IsHandwritten())
            {
                // The receipt was created in a moment where the POS terminal itself could not be used.
                // Therefore, a handwritten receipt and a copy was created that was then handed out.
                // After recovering the POS terminal, the the receipts are sent with a special ftReceiptCaseFlag to be finally included into the receipt chain.
                // In Germany, there is no requirement to send this receipts to the SCU/TSE.
                return _serviceProvider.GetRequiredService<HandwrittenReceiptCommand>();
            }

            // In failed mode, don't even try to access the SCU
            if (queueDE.SSCDFailCount > 0 && !request.IsZeroReceipt() && !request.IsFailTransactionReceipt() && !request.IsOutOfOperationReceipt() && !request.IsInitiateScuSwitchReceipt() && !request.IsFinishScuSwitchReceipt())
            {
                return _serviceProvider.GetRequiredService<SSCDFailedReceiptCommand>();
            }

            RequestCommand command = (request.ftReceiptCase & 0xFFFF) switch
            {
                0x0002 => _serviceProvider.GetRequiredService<ZeroReceiptCommand>(),
                0x0003 => _serviceProvider.GetRequiredService<InitialOperationReceiptCommand>(),
                0x0004 => _serviceProvider.GetRequiredService<OutOfOperationReceiptCommand>(),
                0x0005 => _serviceProvider.GetRequiredService<MonthlyClosingReceiptCommand>(),
                0x0006 => _serviceProvider.GetRequiredService<YearlyClosingReceiptCommand>(),
                0x0007 => _serviceProvider.GetRequiredService<DailyClosingReceiptCommand>(),
                0x0008 => _serviceProvider.GetRequiredService<StartTransactionReceiptCommand>(),
                0x0009 => _serviceProvider.GetRequiredService<UpdateTransactionReceiptCommand>(),
                0x000a => _serviceProvider.GetRequiredService<DeltaTransactionReceiptCommand>(),
                0x000b => _serviceProvider.GetRequiredService<FailTransactionReceiptCommand>(),
                0x0017 => _serviceProvider.GetRequiredService<InitiateScuSwitchReceiptCommand>(),
                0x0018 => _serviceProvider.GetRequiredService<FinishScuSwitchReceiptCommand>(),
                0x0019 => _serviceProvider.GetRequiredService<MigrationReceiptCommand>(),
                _ => null
            };

            if (command != null)
            {
                return command;
            }

            if (request.IsReceiptProcessType())
            {
                return _serviceProvider.GetRequiredService<PosReceiptCommand>();
            }
            else if (request.IsOrderProcessType())
            {
                return _serviceProvider.GetRequiredService<OrderReceiptCommand>();

            }
            else if (request.IsOtherProcessType())
            {
                return _serviceProvider.GetRequiredService<OtherReceiptCommand>();
            }

            throw new NotImplementedException($"The given receipt case 0x{request.ftReceiptCase:x} could not be processed by the Middleware.");
        }
    }
}