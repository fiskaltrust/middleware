resources:
  - repo: self

trigger:
  batch: true
  branches:
    include:
      - main
      - refs/tags/storage/v*

pr:
  branches:
    include:
      - main

variables:
  - group: "Code Signing Certificates"
  - name: BuildConfiguration
    value: release
  - name: BuildPlatform
    value: any cpu
  - name: Solution
    value: "fiskaltrust.storage.sln"
  - name: vmImageName
    value: "windows-latest"

jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:
      - powershell: |
          $nugetFeed = if ($Env:BUILD_SOURCEBRANCH.StartsWith("refs/tags/storage/v")) { "release" } else { "dev" }
          Write-Host "##vso[task.setvariable variable=NuGetFeed;]$nugetFeed"
        displayName: Set NuGet feed

      - checkout: self
        fetchDepth: 0

      - task: UseDotNet@2
        displayName: "Use .NET 6 SDK"
        inputs:
          packageType: "sdk"
          version: "6.x"

      - task: DotNetCoreCLI@2
        inputs:
          command: "restore"
          projects: "storage/*.sln"
          vstsFeed: "$(NuGetFeed)"
          verbosityRestore: "minimal"
          arguments: "--configuration Release"
        displayName: "Restore"

      - task: DotNetCoreCLI@2
        inputs:
          command: "build"
          projects: "storage/*.sln"
          arguments: "--configuration Release"
        displayName: "Build"

      - task: DotNetCoreCLI@2
        inputs:
          command: "test"
          projects: "storage/**/*.UnitTest.csproj"
          arguments: "--configuration Release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Include=[fiskaltrust.*]*"
        displayName: "Run unit tests"

      - pwsh: dotnet tool install --global AzureSignTool
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/storage/v')
        displayName: Install AzureSignTool

      - pwsh: |
          Get-ChildItem -Path "$(Build.SourcesDirectory)\storage\src" -Filter *.dll -Recurse | ForEach-Object {
            azuresigntool sign `
            --azure-key-vault-url "$(CODESIGNING_AZURE_KEY_VAULT_URL)" `
            --azure-key-vault-certificate "$(CODESIGNING_AZURE_KEY_VAULT_CERTIFICATE)" `
            --azure-key-vault-client-id "$env:CODESIGNING_AZURE_KEY_VAULT_CLIENT_ID" `
            --azure-key-vault-tenant-id "$env:CODESIGNING_AZURE_KEY_VAULT_TENANT_ID" `
            --azure-key-vault-client-secret "$env:CODESIGNING_AZURE_KEY_VAULT_SECRET" `
            $_.FullName
          }
        env:
          CODESIGNING_AZURE_KEY_VAULT_CLIENT_ID: $(CODESIGNING_AZURE_KEY_VAULT_CLIENT_ID)
          CODESIGNING_AZURE_KEY_VAULT_TENANT_ID: $(CODESIGNING_AZURE_KEY_VAULT_TENANT_ID)
          CODESIGNING_AZURE_KEY_VAULT_SECRET: $(CODESIGNING_AZURE_KEY_VAULT_SECRET)
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/storage/v')

      - script: |
          dotnet tool install -g dotnet-reportgenerator-globaltool --version 5.3.11
          reportgenerator -reports:$(Build.SourcesDirectory)/storage/test/**/coverage.opencover.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:"Cobertura;HTMLInline;HTMLChart"
        displayName: Create Code coverage report
        workingDirectory: "/"

      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml"
          reportDirectory: "$(Build.SourcesDirectory)/CodeCoverage"

      - script: dotnet pack storage/src/fiskaltrust.storage/fiskaltrust.storage.csproj --no-build --output $(Build.ArtifactStagingDirectory)/fiskaltrust.storage --configuration $(buildConfiguration)
        displayName: "dotnet pack storage"

      - script: dotnet pack storage/src/fiskaltrust.storage.serialization/fiskaltrust.storage.serialization.csproj --no-build --output $(Build.ArtifactStagingDirectory)/fiskaltrust.storage.serialization --configuration $(buildConfiguration)
        displayName: "dotnet pack storage serialization"

      - script: dotnet pack storage/src/fiskaltrust.storage.encryption/fiskaltrust.storage.encryption.csproj --no-build --output $(Build.ArtifactStagingDirectory)/fiskaltrust.storage.encryption --configuration $(buildConfiguration)
        displayName: "dotnet pack storage encryption"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: drop"
        inputs:
          PathtoPublish: "$(build.artifactstagingdirectory)"
