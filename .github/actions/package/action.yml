name: "Build"
inputs:
  path:
    required: true
    type: string
  project:
    required: true
    type: string

outputs:
  version:
    description: "The version of the package"
    value: ${{ steps.get-version.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Install Nerdbank.GitVersioning
      run: dotnet tool install -g nbgv
      shell: pwsh

    - name: Get Version
      id: get-version
      shell: pwsh
      run: |
        $projectDirectory = "${{ inputs.path }}/${{ inputs.project }}"
        $version = nbgv get-version --variable NuGetPackageVersion --project $projectDirectory
        Write-Host "Version: $version"
        echo "version=$version" >> $env:GITHUB_OUTPUT

    - name: Publish v1 Nuget packages
      shell: pwsh
      run: |
        $projectDirectory = "${{ inputs.path }}/${{ inputs.project }}"
        $csprojFile = "$projectDirectory/${{ inputs.project }}.csproj"
        $nuspecFile = "$projectDirectory/.nuspec"

        $version = "${{ steps.get-version.outputs.version }}"

        Write-Host "Version: $version"

        $args = ""
        if(Test-Path $nuspecFile) {
          $xml = New-Object XML
          $xml.Load($nuspecFile)
          $element =  $xml.SelectSingleNode("/package/metadata/version")
          $element.InnerText = $version
          $xml.Save($nuspecFile)

          $args += "/p:NuspecFile=.nuspec"
        }

        dotnet pack "${{ inputs.path }}/${{ inputs.project }}/${{ inputs.project }}.csproj" --no-restore --configuration Release --output ./publish/package-v1-${{ inputs.project }} $args

    - name: Upload v1 Package
      uses: actions/upload-artifact@v4
      with:
        name: package-v1-${{ inputs.project }}
        path: ./publish/package-v1-${{ inputs.project }}

    - name: Publish v2 zip packages
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path ./publish/package-v2-${{ inputs.project }}

        $projectDirectory = "${{ inputs.path }}/${{ inputs.project }}"
        $csprojFile = "$projectDirectory/${{ inputs.project }}.csproj"

        $version = "${{ steps.get-version.outputs.version }}"

        Write-Host "Version: $version"
        if($version -eq "") {
          Write-Error "Version not found"
          exit 1
        }

        dotnet publish $csprojFile --configuration Release -f net6 --no-build --output ./publish/raw/package-v2-${{ inputs.project }} /p:DebugType=None /p:DebugSymbols=false
        Compress-Archive -Path ./publish/raw/package-v2-${{ inputs.project }}/* -DestinationPath ./publish/package-v2-${{ inputs.project }}/$version.zip

        $hash = Get-FileHash ./publish/package-v2-${{ inputs.project }}/$version.zip -Algorithm SHA256
        $hashbytes = $hash.Hash -split '([A-F0-9]{2})' | foreach-object { if ($_) {[System.Convert]::ToByte($_,16)}}
        $hashstring = [System.Convert]::ToBase64String($hashbytes)
        $hashstring | Set-Content ./publish/package-v2-${{ inputs.project }}/$version.zip.hash
        ls ./publish/package-v2-${{ inputs.project }}

    - name: Upload v2 Package
      uses: actions/upload-artifact@v4
      with:
        name: package-v2-${{ inputs.project }}
        path: ./publish/package-v2-${{ inputs.project }}
