name: smoketests

on:
  workflow_dispatch:
  pull_request:
    paths:
      - .github/workflows/smoketests.yml
  
permissions:
  id-token: write
  contents: read

env:
  launcher: "fiskaltrust.service.launcher"
  project: "fiskaltrust.Middleware.Queue.SQLite"
  launcherpath: "./launcher"

jobs:
  test-middleware:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create cashbox
        shell: pwsh
        run: |
            $description = "Cashbox-$(Get-Date -Format 'yyyy-MM-dd_HH-mm-ss')"
            $url = "https://templates-sandbox.fiskaltrust.cloud/api/v1/configuration?outlet_number=1&description=$description"

            $headers = @{
              accountid   = "${{ secrets.FT_ACCOUNT_ID }}"
              accesstoken = "${{ secrets.FT_ACCESS_TOKEN }}"
              "Content-Type" = "application/json"
            }

            $body = Get-Content ".github/scripts/template.json" -Raw

            Write-Host "👉 Sending request to $url"
            $response = Invoke-RestMethod -Uri $url -Headers $headers -Method Post -Body $body

            # Extract values
            $cashboxId  = $response.cashBoxId
            $accessToken = $response.accessToken
            $queueId = $response.configuration.ftQueues[0].Id

            Write-Host "✅ CashBoxId: $cashboxId"
            Write-Host "✅ AccessToken: $accessToken"
            Write-Host "✅ QueueId: $queueId"

            # Make them available to later jobs
            echo "cashboxId=$cashboxId"   >> $env:GITHUB_ENV
            echo "accessToken=$accessToken" >> $env:GITHUB_ENV
            echo "queueId=$queueId"       >> $env:GITHUB_ENV

      - name: Download launcher package
        shell: pwsh
        run: |
          $cashboxId = "${{ env.cashboxId }}"
          $accessToken = "${{ env.accessToken }}"
          $offline = "true"
          $launcher = "${{ env.launcher }}"
          $version = "latest"

          $pair = "${cashboxId}:${accessToken}"
          $encoded = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($pair))
          $headers = @{ Authorization = "Basic $encoded" }

          $url = "https://packages-sandbox.fiskaltrust.at/$cashboxId.download?launcher=$launcher&version=$version&offline=$offline"
          $output = "$launcher.$cashboxId.zip"
          Write-Host "👉 Downloading from URL: $url"
          Write-Host "👉 Saving as: $output"
          Invoke-RestMethod -Uri $url -Headers $headers -OutFile $output

      - name: Extract launcher package
        shell: pwsh
        run: |
         $cashboxId = "${{ env.cashboxId }}"
         $launcher =  "${{ env.launcher }}"
         $zipPath = "$launcher.$cashboxId.zip"
         $extractPath = "${{ env.launcherpath }}"

         Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          
      - name: Run test.cmd, send request, and stop
        shell: pwsh
        run: |
          $scriptPath = (Resolve-Path '${{ env.launcherpath }}/test.cmd').Path
          Write-Host "Starting test.cmd..."
          $process = Start-Process -FilePath "cmd.exe" -ArgumentList @('/c', ('"{0}"' -f $scriptPath)) -PassThru -RedirectStandardOutput test-output.log -RedirectStandardError test-output-error.log

          # Wait a few seconds to let test.cmd start listening
          Start-Sleep -Seconds 60

          # Send POST request to the launcher
          $url = "http://localhost:1500/${{ env.queueId }}/json/v1/Echo"
          #$url = "http://localhost:1500/73a3effb-0495-49a4-a546-10e9afcd4b38/json/v1/Echo"
          $body = @{ Message = "Hello fiskaltrust.Middleware!" } | ConvertTo-Json
          Write-Host "Sending POST request to $url..."
          try {
              $response = Invoke-RestMethod -Uri $url -Method Post -Body $body -ContentType "application/json"
              Write-Host "Response: $($response | ConvertTo-Json)"
          } catch {
              Write-Error "Request failed: $_"
          }

          # Stop the launcher
          Write-Host "Stopping test.cmd..."
          Stop-Process -Id $process.Id -Force

      - name: Upload test output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-output
          path: test-output.log
        continue-on-error: true

      - name: Upload test error
        if: always()
        uses: actions/upload-artifact@v4
        with:
         name: test-error
         path: test-output-error.log
        continue-on-error: true
   
    # - name: Start LocalDB
    #     shell: pwsh
    #     run: |
    #       sqllocaldb create MSSQLLocalDB -s
    #       sqlcmd -S "(localdb)\MSSQLLocalDB" -Q "SELECT @@VERSION"