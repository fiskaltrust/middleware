name: smoketests

on:
  workflow_dispatch:
  pull_request:
    paths:
      - .github/workflows/smoketests.yml
  
permissions:
  id-token: write
  contents: read

env:
  launcher: "fiskaltrust.service.launcher"
  project: "fiskaltrust.Middleware.Queue.SQLite"
  launcherpath: "./launcher"
jobs:
  test-middleware:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download launcher package
        shell: pwsh
        run: |
          $cashboxId = "${{ secrets.FT_CASHBOX_ID }}"
          $accessToken = "${{ secrets.FT_ACCESS_TOKEN }}"
          $offline = "true"
          $launcher = "${{ env.launcher }}"
          $version = "latest"

          $pair = "${cashboxId}:${accessToken}"
          $encoded = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($pair))
          $headers = @{ Authorization = "Basic $encoded" }

          $url = "https://packages-sandbox.fiskaltrust.at/$cashboxId.download?launcher=$launcher&version=$version&offline=$offline"
          $output = "$launcher.$cashboxId.zip"
          Write-Host "👉 Downloading from URL: $url"
          Write-Host "👉 Saving as: $output"
          Invoke-RestMethod -Uri $url -Headers $headers -OutFile $output

      - name: Extract launcher package
        shell: pwsh
        run: |
         $cashboxId = "${{ secrets.FT_CASHBOX_ID }}"
         $launcher =  "${{ env.launcher }}"
         $zipPath = "$launcher.$cashboxId.zip"
         $extractPath = "${{ env.launcherpath }}"

         Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
      - name: Generate configuration.json
        shell: pwsh
        run: |
          $queueId = [guid]::NewGuid().ToString()
          echo "queueId=$queueId" >> $env:GITHUB_ENV

          ./.github/scripts/generate-launcher-configuration.ps1 `
           -OutputPath "${{ env.launcherpath }}/configuration.json" `
           -Package "${{ env.project }}" `
           -Version "0.0.0-ci" `
           -cashBoxId "${{ secrets.FT_CASHBOX_ID }}" `
           -queueId $queueId

      - name: Upload configuration.json as artifact
        uses: actions/upload-artifact@v4
        with:
         name: configuration
         path: ${{ env.launcherpath }}/configuration.json
     
      - uses: ./.github/actions/build
        with:
          pattern: queue/src/${{ env.project }}/${{ env.project }}.csproj
          configuration: Debug

      - run: |
          dotnet publish --configuration Release --no-restore -f net461
          dotnet publish --configuration Release --no-restore -f netstandard2.0
          dotnet publish --configuration Release --no-restore -f netstandard2.1
        if: ${{ env.project }} == 'fiskaltrust.Middleware.Queue.SQLite'
        working-directory: queue/src/fiskaltrust.Middleware.Queue.SQLite
        name: Publish SQLite for nuget

      - name: create the NuGet package
        uses: ./.github/actions/package
        with:
         path: queue/src
         project: ${{ env.project }}

      - name: Update launcher packages
        shell: pwsh
        run: |
         $project = "${{ env.project }}"
         $packageSrc = "./publish/package-v1-$project/$project.*.nupkg"
         $packageDest = "${{ env.launcherpath }}/packages/"

         Write-Host "Copying NuGet package from $packageSrc to $packageDest"
         Copy-Item -Path $packageSrc -Destination $packageDest -Force
         Get-ChildItem -Path "${{ env.launcherpath }}/packages" -Recurse   
      - name: Check package dependencies
        shell: pwsh
        run: |
            $nupkgPath = "./publish/package-v1-fiskaltrust.Middleware.Queue.SQLite/fiskaltrust.Middleware.Queue.SQLite.*.nupkg"

            # Extract nuspec from nupkg
            $nuspecFile = Join-Path $env:RUNNER_TEMP "temp.nuspec"
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            $zip = [System.IO.Compression.ZipFile]::OpenRead((Get-Item $nupkgPath).FullName)
            $entry = $zip.Entries | Where-Object { $_.FullName -like "*.nuspec" }
            [System.IO.Compression.ZipFileExtensions]::ExtractToFile($entry, $nuspecFile, $true)
            $zip.Dispose()

            # Load nuspec
            [xml]$nuspec = Get-Content $nuspecFile
            $deps = $nuspec.package.metadata.dependencies.group.dependency

            #Authentication
            $cashboxId = "${{ secrets.FT_CASHBOX_ID }}"
            $accessToken = "${{ secrets.FT_ACCESS_TOKEN }}"
            $pair = "${cashboxId}:${accessToken}"
            $encoded = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($pair))
            $headers = @{ Authorization = "Basic $encoded" }
            foreach ($dep in $deps) {
                $id = $dep.id
                $version = $dep.version
                $localPath = "${{ env.launcher }}/packages/$id.$version.nupkg"

                if ([string]::IsNullOrEmpty($id) -or [string]::IsNullOrEmpty($version)) {
                   continue
                }

                if (-not (Test-Path $localPath)) {
                    Write-Host "⚠ Missing or wrong version for $id ($version). Downloading..."
                    $url = "https://packages-sandbox.fiskaltrust.cloud/$id.$version.nupkg"
                    Invoke-WebRequest -Uri $url -Headers $headers -OutFile $localPath
                } 
            }   

      - name: Run test.cmd, send request, and stop
        shell: pwsh
        run: |
          $scriptPath = (Resolve-Path '${{ env.launcherpath }}/test.cmd').Path
          Write-Host "Starting test.cmd..."
          $process = Start-Process -FilePath "cmd.exe" -ArgumentList @('/c', ('"{0}"' -f $scriptPath)) -PassThru -RedirectStandardOutput test-output.log -RedirectStandardError test-output-error.log

          # Wait a few seconds to let test.cmd start listening
          Start-Sleep -Seconds 60

          # Send POST request to the launcher
          $url = "http://localhost:1500/${{ env.queueId }}/json/v1/Echo"
          #$url = "http://localhost:1500/73a3effb-0495-49a4-a546-10e9afcd4b38/json/v1/Echo"
          $body = @{ Message = "Hello fiskaltrust.Middleware!" } | ConvertTo-Json
          Write-Host "Sending POST request to $url..."
          try {
              $response = Invoke-RestMethod -Uri $url -Method Post -Body $body -ContentType "application/json"
              Write-Host "Response: $($response | ConvertTo-Json)"
          } catch {
              Write-Error "Request failed: $_"
          }

          # Stop the launcher
          Write-Host "Stopping test.cmd..."
          Stop-Process -Id $process.Id -Force

      - name: Upload test output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-output
          path: test-output.log
        continue-on-error: true

      - name: Upload test error
        if: always()
        uses: actions/upload-artifact@v4
        with:
         name: test-error
         path: test-output-error.log
        continue-on-error: true
      # - name: Cleanup package folder
      #   shell: pwsh
      #   run: |
      #     if (Test-Path "package") {
      #       Remove-Item "package/*" -Recurse -Force
      #     }
