name: 'Queue Release'
on:
  push:
    tags:
      - queue/**/v*

permissions:
  checks: write
  pull-requests: write
  id-token: write
  contents: read

jobs:
  tests:
    needs: []
    uses: ./.github/workflows/queue-build.yml
    secrets: inherit
  
  meta:
    needs: []
    runs-on: ubuntu-latest
    outputs:
      package: ${{ steps.meta.outputs.package }}
      queue: ${{ steps.meta.outputs.queue }}
    steps:
      - id: meta
        shell: pwsh
        run: |
          if(!("${{ github.ref }}" -match "queue/([^/]*)/v(.*)")) {
            throw "Invalid tag format"
          }
          $package = switch($matches[1]) {
            "azuretablestorage" { "AzureTableStorage" }
            "ef" { "EF" }
            "inmemory" { "InMemory" }
            "mysql" { "MySQL" }
            "postgresql" { "PostgreSQL" }
            "sqlite" { "SQLite" }
          }
          Write-Output "queue=$package"
          Write-Output "queue=$package" >> $env:GITHUB_OUTPUT
          Write-Output "package=fiskaltrust.Middleware.Queue.$package"
          Write-Output "package=fiskaltrust.Middleware.Queue.$package" >> $env:GITHUB_OUTPUT

  acceptance-tests:
    concurrency:
      group: queue-acceptance-tests
      cancel-in-progress: true
    needs: [meta, tests]
    secrets: inherit
    uses: ./.github/workflows/queue-acceptance-tests.yml
    with:
      only: fiskaltrust.Middleware.Storage.${{ needs.meta.outputs.queue }}.AcceptanceTest

  package:
    needs: [meta, tests, acceptance-tests]
    secrets: inherit
    uses: ./.github/workflows/queue-package.yml
    with:
      package: ${{ needs.meta.outputs.package }}

  sandbox:
    needs: [meta, package]
    secrets: inherit
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/deploy.yml
    with:
      package: ${{ needs.meta.outputs.package }}
      environment: sandbox

  production:
    needs: [meta, package, sandbox]
    secrets: inherit
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/deploy.yml
    with:
      package: ${{ needs.meta.outputs.package }}
      environment: production